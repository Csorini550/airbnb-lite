{"version":3,"sources":["../../source/helpers/phoneInputHelpers.test.js"],"names":["getPreSelectedCountry","getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","e164","getCountryForPartialE164Number","onPhoneDigitsChange","getInitialPhoneDigits","getCountryFromPossiblyIncompleteInternationalPhoneNumber","compareStrings","stripCountryCallingCode","getNationalSignificantNumberDigits","couldNumberBelongToCountry","trimNumber","metadata","describe","it","phoneNumber","countries","required","should","equal","expect","to","be","undefined","country","phone","defaultCountry","defaultLabels","countryNames","deep","value","label","addInternationalOption","ZZ","a","b","nationalNumber","prevCountry","newCountry","useNationalFormat","phoneDigits","prevPhoneDigits","limitMaxLength","international","countryCallingCodeEditable","onChange","number"],"mappings":"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","sourcesContent":["import {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\te164,\r\n\tgetCountryForPartialE164Number,\r\n\tonPhoneDigitsChange,\r\n\tgetInitialPhoneDigits,\r\n\t// Private functions\r\n\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber,\r\n\tcompareStrings,\r\n\tstripCountryCallingCode,\r\n\tgetNationalSignificantNumberDigits,\r\n\tcouldNumberBelongToCountry,\r\n\ttrimNumber\r\n} from './phoneInputHelpers'\r\n\r\nimport metadata from 'libphonenumber-js/metadata.min.json'\r\n\r\ndescribe('phoneInputHelpers', () => {\r\n\tit('should get pre-selected country', () => {\r\n\t\t// Can't return \"International\". Return the first country available.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tphoneNumber: {},\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('US')\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can't be derived from the phone number.\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tphoneNumber: {},\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// Derive country from the phone number.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Country derived from the phone number overrides the supplied one.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Only pre-select a country if it's in the available `countries` list.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tcountries: ['US', 'DE'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('US')\r\n\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tcountries: ['US', 'DE'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\t})\r\n\r\n\tit('should generate country select options', () => {\r\n\t\tconst defaultLabels = {\r\n\t\t\t'RU': 'Russia (Россия)',\r\n\t\t\t'US': 'United States',\r\n\t\t\t'ZZ': 'International'\r\n\t\t}\r\n\r\n\t\t// Without custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia' }\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// Should substitute missing country names with country codes.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': undefined }\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'RU'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With \"International\" (without custom country names).\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels,\r\n\t\t\taddInternationalOption: true\r\n\t\t}).should.deep.equal([{\r\n\t\t\tlabel: 'International'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With \"International\" (with custom country names).\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia', ZZ: 'Intl' },\r\n\t\t\taddInternationalOption: true\r\n\t\t}).should.deep.equal([{\r\n\t\t\tlabel: 'Intl'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should generate country select options (custom `compareStrings`)', () => {\r\n\t\tconst defaultLabels = {\r\n\t\t\t'RU': 'Russia (Россия)',\r\n\t\t\t'US': 'United States',\r\n\t\t\t'ZZ': 'International'\r\n\t\t}\r\n\r\n\t\t// Without custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels,\r\n\t\t\t// Reverse order.\r\n\t\t\tcompareStrings: (a, b) => a < b ? 1 : (a > b ? -1 : 0)\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}])\r\n\t})\r\n\r\n\t// it('should generate country select options (Chinese locale)', () => {\r\n\t// \t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/20\r\n\t//\r\n\t// \tconst defaultLabels = {\r\n\t// \t\t'RU': 'Russia (Россия)',\r\n\t// \t\t'US': 'United States',\r\n\t// \t\t'ZZ': 'International'\r\n\t// \t}\r\n\t//\r\n\t// \t// Without custom country names.\r\n\t// \tgetCountrySelectOptions({\r\n\t// \t\tcountries: ['US', 'RU'],\r\n\t// \t\tcountryNames: defaultLabels,\r\n\t// \t\tcompareStringsLocales: 'zh-CN-u-co-pinyin'\r\n\t// \t}).should.deep.equal([{\r\n\t// \t\tvalue: 'US',\r\n\t// \t\tlabel: 'United States'\r\n\t// \t}, {\r\n\t// \t\tvalue: 'RU',\r\n\t// \t\tlabel: 'Russia (Россия)'\r\n\t// \t}])\r\n\t// })\r\n\r\n\tit('should parse phone numbers', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\r\n\t\tphoneNumber.country.should.equal('RU')\r\n\t\tphoneNumber.nationalNumber.should.equal('8005553535')\r\n\r\n\t\t// No `value` passed.\r\n\t\texpect(parsePhoneNumber(null, metadata)).to.equal.undefined\r\n\t})\r\n\r\n\tit('should generate national number digits', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+33509758351', metadata)\r\n\t\tgenerateNationalNumberDigits(phoneNumber).should.equal('0509758351')\r\n\t})\r\n\r\n\tit('should migrate parsed input for new country', () => {\r\n\t\t// No input. Returns `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry('', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Switching from \"International\" to a country\r\n\t\t// to which the phone number already belongs to.\r\n\t\t// No changes. Returns `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+18005553535')\r\n\r\n\t\t// Switching between countries. National number. No changes.\r\n\t\tgetPhoneDigitsForNewCountry('8005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('8005553535')\r\n\r\n\t\t// Switching from \"International\" to a country. Calling code not matches. Resets parsed input.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching from \"International\" to a country. Calling code matches. Doesn't reset parsed input.\r\n\t\tgetPhoneDigitsForNewCountry('+12223333333', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+12223333333')\r\n\r\n\t\t// Switching countries. International number. Calling code doesn't match.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching countries. International number. Calling code matches.\r\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+18005553535')\r\n\r\n\t\t// Switching countries. International number.\r\n\t\t// Country calling code is longer than the amount of digits available.\r\n\t\tgetPhoneDigitsForNewCountry('+99', {\r\n\t\t\tprevCountry: 'KG',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching countries. International number. No such country code.\r\n\t\tgetPhoneDigitsForNewCountry('+99', {\r\n\t\t\tprevCountry: 'KG',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching to \"International\". National number.\r\n\t\tgetPhoneDigitsForNewCountry('8800555', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7800555')\r\n\r\n\t\t// Switching to \"International\". No national (significant) number digits entered.\r\n\t\tgetPhoneDigitsForNewCountry('8', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Switching to \"International\". International number. No changes.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\t// Prefer national format. Country matches. Leaves the \"national (significant) number\".\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'RU',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('8005553535')\r\n\r\n\t\t// Prefer national format. Country doesn't match, but country calling code does. Leaves the \"national (significant) number\".\r\n\t\tgetPhoneDigitsForNewCountry('+12133734253', {\r\n\t\t\tnewCountry: 'CA',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('2133734253')\r\n\r\n\t\t// Prefer national format. Country doesn't match, neither does country calling code. Clears the value.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Force international format. `phoneDigits` is empty. From no country to a country.\r\n\t\tgetPhoneDigitsForNewCountry(null, {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: false\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with the same calling code.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1222')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with another calling code.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From no country to a country.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1222')\r\n\t})\r\n\r\n\tit('should format phone number in e164', () =>\r\n\t{\r\n\t\t// No number.\r\n\t\texpect(e164()).to.be.undefined\r\n\r\n\t\t// International number. Just a '+' sign.\r\n\t\texpect(e164('+')).to.be.undefined\r\n\r\n\t\t// International number.\r\n\t\te164('+7800').should.equal('+7800')\r\n\r\n\t\t// National number. Without country.\r\n\t\texpect(e164('8800', null)).to.be.undefined\r\n\r\n\t\t// National number. With country. Just national prefix.\r\n\t\texpect(e164('8', 'RU', metadata)).to.be.undefined\r\n\r\n\t\t// National number. With country.\r\n\t\te164('8800', 'RU', metadata).should.equal('+7800')\r\n\t})\r\n\r\n\tit('should trim the phone number if it exceeds the maximum length', () =>\r\n\t{\r\n\t\t// // No number.\r\n\t\t// expect(trimNumber()).to.be.undefined\r\n\r\n\t\t// Empty number.\r\n\t\texpect(trimNumber('', 'RU', metadata)).to.equal('')\r\n\r\n\t\t// // International number. Without country.\r\n\t\t// trimNumber('+780055535351').should.equal('+780055535351')\r\n\r\n\t\t// // National number. Without country.\r\n\t\t// trimNumber('880055535351', null).should.equal('880055535351')\r\n\r\n\t\t// National number. Doesn't exceed the maximum length.\r\n\t\ttrimNumber('88005553535', 'RU', metadata).should.equal('88005553535')\r\n\t\t// National number. Exceeds the maximum length.\r\n\t\ttrimNumber('880055535351', 'RU', metadata).should.equal('88005553535')\r\n\r\n\t\t// International number. Doesn't exceed the maximum length.\r\n\t\ttrimNumber('+12135553535', 'US', metadata).should.equal('+12135553535')\r\n\t\t// International number. Exceeds the maximum length.\r\n\t\ttrimNumber('+121355535351', 'US', metadata).should.equal('+12135553535')\r\n\t})\r\n\r\n\tit('should get country for partial E.164 number', () =>\r\n\t{\r\n\t\t// Just a '+' sign.\r\n\t\tgetCountryForPartialE164Number('+', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\texpect(getCountryForPartialE164Number('+', {\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can be derived.\r\n\t\tgetCountryForPartialE164Number('+78005553535', {\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\texpect(getCountryForPartialE164Number('+12', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'US'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\t// Bit \"International\" option is not available.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\r\n\t\tgetCountryForPartialE164Number('+12', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'US'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\t})\r\n\r\n\tit('should get country from possibly incomplete international phone number', () =>\r\n\t{\r\n\t\t// // `001` country calling code.\r\n\t\t// // Non-geographic numbering plan.\r\n\t\t// expect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+800', metadata)).to.be.undefined\r\n\r\n\t\t// Country can be derived.\r\n\t\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber('+33', metadata).should.equal('FR')\r\n\r\n\t\t// Country can't be derived yet.\r\n\t\texpect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+12', metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should compare strings', () =>\r\n\t{\r\n\t\tcompareStrings('aa', 'ab').should.equal(-1)\r\n\t\tcompareStrings('aa', 'aa').should.equal(0)\r\n\t\tcompareStrings('aac', 'aab').should.equal(1)\r\n\t})\r\n\r\n\tit('should strip country calling code from a number', () =>\r\n\t{\r\n\t\t// Number is longer than country calling code prefix.\r\n\t\tstripCountryCallingCode('+7800', 'RU', metadata).should.equal('800')\r\n\r\n\t\t// Number is shorter than (or equal to) country calling code prefix.\r\n\t\tstripCountryCallingCode('+3', 'FR', metadata).should.equal('')\r\n\t\tstripCountryCallingCode('+7', 'FR', metadata).should.equal('')\r\n\r\n\t\t// `country` doesn't fit the actual `number`.\r\n\t\t// Iterates through all available country calling codes.\r\n\t\tstripCountryCallingCode('+7800', 'FR', metadata).should.equal('800')\r\n\r\n\t\t// No `country`.\r\n\t\t// And the calling code doesn't belong to any country.\r\n\t\tstripCountryCallingCode('+999', null, metadata).should.equal('')\r\n\t})\r\n\r\n\tit('should get national significant number part', () =>\r\n\t{\r\n\t\t// International number.\r\n\t\tgetNationalSignificantNumberDigits('+7800555', null, metadata).should.equal('800555')\r\n\r\n\t\t// International number.\r\n\t\t// No national (significant) number digits.\r\n\t\texpect(getNationalSignificantNumberDigits('+', null, metadata)).to.be.undefined\r\n\t\texpect(getNationalSignificantNumberDigits('+7', null, metadata)).to.be.undefined\r\n\r\n\t\t// National number.\r\n\t\tgetNationalSignificantNumberDigits('8800555', 'RU', metadata).should.equal('800555')\r\n\r\n\t\t// National number.\r\n\t\t// No national (significant) number digits.\r\n\t\texpect(getNationalSignificantNumberDigits('8', 'RU', metadata)).to.be.undefined\r\n\t\texpect(getNationalSignificantNumberDigits('', 'RU', metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should determine of a number could belong to a country', () =>\r\n\t{\r\n\t\t// Matching.\r\n\t\tcouldNumberBelongToCountry('+7800', 'RU', metadata).should.equal(true)\r\n\r\n\t\t// First digit already not matching.\r\n\t\tcouldNumberBelongToCountry('+7800', 'FR', metadata).should.equal(false)\r\n\r\n\t\t// First digit matching, second - not matching.\r\n\t\tcouldNumberBelongToCountry('+33', 'AM', metadata).should.equal(false)\r\n\r\n\t\t// Number is shorter than country calling code.\r\n\t\tcouldNumberBelongToCountry('+99', 'KG', metadata).should.equal(true)\r\n\t})\r\n\r\n\tit('should handle phone digits change (should choose new \"value\" based on phone digits)', () => {\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tmetadata,\r\n\t\t\tcountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+78', {\r\n\t\t\tmetadata,\r\n\t\t\tcountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change', () => {\r\n\t\tonPhoneDigitsChange(undefined, {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: undefined,\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('1213', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+1213', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('213', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '213',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+78005553535', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// Won't reset an already selected country.\r\n\r\n\t\tonPhoneDigitsChange('+15555555555', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+15555555555',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+15555555555'\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input\r\n\t\t// and the user decides to erase all input.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input\r\n\t\t// and the user decides to erase all input.\r\n\t\t// Should reset to default country.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input\r\n\t\t// and the user decides to erase all input up to the `+` sign.\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (limitMaxLength: true)', () => {\r\n\t\tonPhoneDigitsChange('21337342530',{\r\n\t\t\tcountry: 'US',\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '2133734253',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+12133734253'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+121337342530', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+12133734253',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+12133734253'\r\n\t\t})\r\n\r\n\t\t// This case is intentionally ignored to simplify the code.\r\n\t\tonPhoneDigitsChange('+121337342530', {\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\t// phoneDigits: '+12133734253',\r\n\t\t\t// country: 'US',\r\n\t\t\t// value: '+12133734253'\r\n\t\t\tphoneDigits: '+121337342530',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+121337342530'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true`)', () => {\r\n\t\t// Shouldn't set `country` to `defaultCountry`\r\n\t\t// when erasing parsed input starting with a `+`\r\n\t\t// when `international` is `true`.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should support forcing international phone number input format.\r\n\t\tonPhoneDigitsChange('2', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+2',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+2'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (reset incompatible international input)', () => {\r\n\t\tonPhoneDigitsChange('+1', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (append national input)', () => {\r\n\t\tonPhoneDigitsChange('8', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (compatible input)', () => {\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: false`)', () => {\r\n\t\tconst onChange = (phoneDigits, prevPhoneDigits, country) => onPhoneDigitsChange(phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Just country calling code.\r\n\t\tonChange('+7', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\tonChange('+78', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\tonChange('+121', '', 'US').should.deep.equal({\r\n\t\t\tphoneDigits: '21',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+121'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\tonChange('+78005553535', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Another country: just trims the `+`.\r\n\t\tonChange('+78005553535', '', 'US').should.deep.equal({\r\n\t\t\tphoneDigits: '78005553535',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+178005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in national format.\r\n\t\tonChange('88005553535', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in national format.\r\n\t\tonChange('88005553535', '8800555353', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// Empty `phoneDigits`.\r\n\t\tonChange('', '88005553535', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: false` and no country selected)', () => {\r\n\t\t// If `international` is `false` then it means that\r\n\t\t// \"International\" option should not be available,\r\n\t\t// so it doesn't handle the cases when it is available.\r\n\r\n\t\tconst onChange = (phoneDigits) => onPhoneDigitsChange(phoneDigits, {\r\n\t\t\tprevPhoneDigits: '',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// No country calling code.\r\n\t\tonChange('+').should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Just country calling code.\r\n\t\tonChange('+7').should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\tonChange('+78').should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\tonChange('+3311').should.deep.equal({\r\n\t\t\tphoneDigits: '11',\r\n\t\t\tcountry: 'FR',\r\n\t\t\tvalue: '+3311'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Full number.\r\n\t\tonChange('+78005553535').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should get initial parsed input', () => {\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7')\r\n\r\n\t\texpect(getInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\texpect(getInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\t})\r\n\r\n\tit('should get initial parsed input (has `phoneNumber` that has `country`)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: phoneNumber.number,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tuseNationalFormat: true,\r\n\t\t\tphoneNumber,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('88005553535')\r\n\t})\r\n\r\n\tit('should get initial parsed input (has `phoneNumber` that has no `country`)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+870773111632', metadata)\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: phoneNumber.number,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tuseNationalFormat: true,\r\n\t\t\tphoneNumber,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+870773111632')\r\n\t})\r\n})"],"file":"phoneInputHelpers.test.js"}