{"version":3,"sources":["../source/PhoneInputWithCountry.js"],"names":["PhoneNumberInput_","props","React","createRef","country","metadata","newCountry","international","onChange","focusInputOnCountrySelection","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","useNationalFormat","newValue","getInputRef","current","focus","setState","hasUserSelectedACountry","value","_phoneDigits","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","countries","currentlySelectedCountry","stateUpdate","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","labels","displayInitialValueAsLocalNumber","initialValueFormat","isCountrySupportedWithError","undefined","phoneNumber","CountryIcon","required","onCountryChange","selectedCountry","prevProps","prevState","inputRef","name","disabled","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","countryOptionsOrder","flags","flagComponent","flagUrl","internationalIcon","reset","locales","rest","InputComponent","InputSmart","InputBasic","countrySelectOptions","useMemoCountrySelectOptions","countryNames","compareStringsLocales","onCountryFocus","onCountryBlur","PureComponent","PhoneNumberInput","forwardRef","ref","propTypes","PropTypes","string","func","isRequired","onKeyDown","bool","oneOf","arrayOf","labelsPropType","oneOfType","objectOf","elementType","object","metadataPropType","defaultProps","Flag","InternationalIcon","any","countrySelectOptionsMemo","countrySelectOptionsMemoDependencies","generator","dependencies","areEqualArrays","a","b","length","i"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport Flag from './Flag'\r\nimport InternationalIcon from './InternationalIcon'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tinputRef = React.createRef()\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: getPreSelectedCountry({\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\trequired: !addInternationalOption,\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.getInputRef().current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetInputRef() {\r\n\t\tconst { inputRef } = this.props\r\n\t\treturn inputRef || this.inputRef\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused\r\n\t\t\t\t})}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.getInputRef()}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * Updates the `value` as the user inputs the phone number.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t * @ignore\r\n\t */\r\n\tonKeyDown: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to disable both the phone number `<input/>`\r\n\t * and the country `<select/>`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string.isRequired,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * By default, the caret position is being \"intelligently\" managed\r\n\t * while a user inputs a phone number.\r\n\t * This \"smart\" caret behavior can be turned off\r\n\t * by passing `smartCaret={false}` property.\r\n\t * This is just an \"escape hatch\" for any possible caret position issues.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType.isRequired,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\r\n}\r\n\r\nPhoneNumberInput.defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `true` the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: false,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nlet countrySelectOptionsMemo\r\nlet countrySelectOptionsMemoDependencies\r\nfunction useMemoCountrySelectOptions(generator, dependencies) {\r\n\tif (!countrySelectOptionsMemoDependencies ||\r\n\t\t!areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\r\n\t\tcountrySelectOptionsMemo = generator()\r\n\t\tcountrySelectOptionsMemoDependencies = dependencies\r\n\t}\r\n\treturn countrySelectOptionsMemo\r\n}\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}"],"file":"PhoneInputWithCountry.js"}